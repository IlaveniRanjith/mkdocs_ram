{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Android Open Source Project","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"#codeblocks","title":"Codeblocks","text":"<p>some <code>code</code> goes here</p>"},{"location":"#plain-codeblocks","title":"Plain codeblocks","text":"<p>Time and Date in kernel loadable module in Andorid above 5.10.xx version:</p> <pre><code>#include &lt;linux/init.h&gt;\n#include &lt;linux/module.h&gt;\n#include &lt;linux/ktime.h&gt;\n#include &lt;linux/timekeeping.h&gt;\n#include &lt;linux/time64.h&gt;\n#include &lt;linux/printk.h&gt;\n#include &lt;uapi/linux/time.h&gt;\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Ilaveni Ranjith\");\nMODULE_DESCRIPTION(\"Kernel module to print current time\");\n\nextern void ktime_get_real_ts64(struct timespec64 *tv);\n\nstatic int hello_init(void)\n{   \n    time64_t local_time;\n    struct tm tm;\n    struct timespec64 ts;\n    char time[50];\n\n    ktime_get_real_ts64(&amp;ts);\n    local_time = ts.tv_sec - ( sys_tz.tz_minuteswest * 60);\n    time64_to_tm(local_time, 0, &amp;tm);\n\n    sprintf(time, \"%d-%02d-%02d %02d:%02d:%02d\", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,(int) tm.tm_hour,(int) tm.tm_min,(int) tm.tm_sec );\n\n    pr_info(\"Current: Date &amp; time: %s\\n\", time);\n\n    return 0;\n}\n\nstatic void hello_exit(void)\n{\n    pr_info(\"Goodbye Kernel World\\n\");\n}\n\nmodule_init(hello_init);\n</code></pre>"},{"location":"#code-for-python-language","title":"code for python language","text":"<p>code with <code>py</code> at the start</p> graph.py<pre><code>#!/usr/bin/env python\n# Convert AOSP build include egrep output to visual graph via graphviz\n# ---\n# In aosp/build/make/, run something like:\n#  egrep -R '(inherit|include)' target/ | $DEV/tools/graph-bulid-includes.py | dot -Tpng &gt; build-includes.png\nimport re\nimport sys\nlines = sys.stdin.readlines()\nnodes = {}\npairs = []\nfor l in lines:\nl = l.replace(\"$(SRC_TARGET_DIR)\", \"target\")\nl = l.replace(\"build/make/target\", \"target\")\nm = re.match('^([-\\.\\w/_]+):(([\\s ,-]|include|\\$\\(call|inherit|product|if|exists))*([-\\.\\w/_]+\\.mk)\\)?', l)\nif m:\nmfile = m.group(1)\nminclude = m.group(4)\nfor k in (mfile,minclude):\nif not k in nodes:\nnodes[k] = len(nodes)\npairs.append((mfile,minclude))\nelse:\nsys.stderr.write('Dropped line: {}\\n'.format(l))\nprint(\"strict digraph includes {\")\nprint(\"\\trankdir=LR\")\nfor (k,v) in nodes.items():\nprint(\"\\tn{} [label=\\\"{}\\\" shape=box]\".format(v, k))\nfor (mfile,minclude) in pairs:\nprint(\"\\tn{} -&gt; n{}\").format(nodes[mfile], nodes[minclude])\nprint(\"}\")\n</code></pre>"},{"location":"#icons-and-emojis","title":"ICons and Emojis","text":""},{"location":"page2/","title":"Kernel","text":""},{"location":"page2/#downloading-sources","title":"Downloading Sources","text":"<p>first need to download the sources</p>"}]}